// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/09/2021 14:17:09"
                                                                                
// Verilog Test Bench template for design : UART_Tx
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module UART_Tx_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg TX_LAUNCH;
reg clk_Tx;
reg [7:0] data_in;
reg reset;
// wires                                               
wire Tx_out;
wire UART_clk;

// assign statements (if any)                          
UART_Tx i1 (
// port map - connection between master ports and signals/registers   
	.TX_LAUNCH(TX_LAUNCH),
	.Tx_out(Tx_out),
	.UART_clk(UART_clk),
	.clk_Tx(clk_Tx),
	.data_in(data_in),
	.reset(reset)
);
initial begin                                                  
clk_Tx <= 1'b0;  
TX_LAUNCH <= 1'b0;                                  
$display("Running testbench");                       
end                                                    

initial begin                                                  
    	#1000 TX_LAUNCH <= 1'b1;
	#1001 TX_LAUNCH <= 1'b0;     
	
	#500000 TX_LAUNCH <= 1'b1;
	#500001 TX_LAUNCH <= 1'b0;     
	                           
end    

always begin                                                  
    	#1 clk_Tx <= !clk_Tx;                                    
end                                                    
                                                
endmodule

